cmake_minimum_required(VERSION 2.8.3)
project(andbot)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  std_msgs
  geometry_msgs
  nav_msgs
  tf
  message_generation
  pcl_ros
  sensor_msgs
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
 add_message_files(
   FILES
   Sonar.msg
   Bump.msg
   WheelCmd.msg
   WheelFb.msg
   JointCmd.msg
   JointFb.msg
   JointOffset.msg
   Cmd.msg
   HeadCmd.msg
   HeadOffset.msg
   Fb.msg
   Offset.msg
   Battery.msg
 )

## Generate services in the 'srv' folder
add_service_files(
   FILES
   Calibrate.srv
   DeviceCheck.srv
   DriverState.srv
   Startup.srv
 )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
 generate_messages(
   DEPENDENCIES
   std_msgs
 )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES Andbot
  CATKIN_DEPENDS roscpp rospy std_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
)

## Declare a C++ library
# add_library(Andbot
#   src/${PROJECT_NAME}/Andbot.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(Andbot ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
# add_executable(Andbot_node src/Andbot_node.cpp)
#add_executable(compliance_control src/compliance_control.cpp)
#target_link_libraries(compliance_control ${catkin_LIBRARIES})

#add_executable(mybot_odometry src/mybot_odometry.cpp)
#target_link_libraries(mybot_odometry ${catkin_LIBRARIES})

add_executable(app_sub src/app_sub.cpp)
target_link_libraries(app_sub ${catkin_LIBRARIES})

add_executable(mybot_odometry_v1 src/mybot_odometry_v1.cpp)
target_link_libraries(mybot_odometry_v1 ${catkin_LIBRARIES})

add_executable(mybot_base_controller_v1 src/mybot_base_controller_v1.cpp)
target_link_libraries(mybot_base_controller_v1 ${catkin_LIBRARIES})

#add_executable(acc_lim_test src/acc_lim_test.cpp)
#target_link_libraries(acc_lim_test ${catkin_LIBRARIES})
add_executable(sonar src/sonar.cpp)
target_link_libraries(sonar ${catkin_LIBRARIES})

#add_executable(mybot_odom_ekf src/mybot_odom_ekf.cpp)
#target_link_libraries(mybot_odom_ekf ${catkin_LIBRARIES})

add_executable(mybot_odom_ekf_v1 src/mybot_odom_ekf_v1.cpp)
target_link_libraries(mybot_odom_ekf_v1 ${catkin_LIBRARIES})

add_executable(mybot_odom_fusion src/mybot_odom_fusion.cpp)
target_link_libraries(mybot_odom_fusion ${catkin_LIBRARIES})

#add_executable(mybot_base_controller src/mybot_base_controller.cpp)
#target_link_libraries(mybot_base_controller ${catkin_LIBRARIES})

#add_executable(mybot_loop src/mybot_loop.cpp)
#target_link_libraries(mybot_loop ${catkin_LIBRARIES})

add_executable(mybot_rplidar_laser_angular_bound_filter src/mybot_rplidar_laser_angular_bound_filter.cpp)
target_link_libraries(mybot_rplidar_laser_angular_bound_filter ${catkin_LIBRARIES})
#add_executable(mybot_laser_obstacle_clearing_filter src/mybot_laser_obstacle_clearing_filter.cpp)
#target_link_libraries(mybot_laser_obstacle_clearing_filter ${catkin_LIBRARIES})

#add_executable(mybot_stop_when_goal_reached src/mybot_stop_when_goal_reached.cpp)
#target_link_libraries(mybot_stop_when_goal_reached ${catkin_LIBRARIES})

add_executable(teleop_home src/teleop_home.cpp)
target_link_libraries(teleop_home ${catkin_LIBRARIES})

add_executable(action src/action.cpp)
target_link_libraries(action ${catkin_LIBRARIES})

add_executable(left_arm_moveR src/left_arm_moveR.cpp)
target_link_libraries(left_arm_moveR ${catkin_LIBRARIES})

add_executable(right_arm_moveR src/right_arm_moveR.cpp)
target_link_libraries(right_arm_moveR ${catkin_LIBRARIES})

add_executable(teleop_rugby src/teleop_rugby.cpp)
target_link_libraries(teleop_rugby ${catkin_LIBRARIES})

#add_executable(voxel_grid_test src/voxel_grid_test.cpp)
#target_link_libraries(voxel_grid_test ${catkin_LIBRARIES})

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(Andbot_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(Andbot_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS Andbot Andbot_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_Andbot.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

